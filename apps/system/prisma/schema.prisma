generator client {
  output   = "./generated/client"
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Division {
  id            String     @id @default(uuid())
  department_id String
  department    Department @relation(fields: [department_id], references: [id], onDelete: Restrict)
  code          String     @unique
  name          String
  status        Int        @default(1)

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("division")
}

model Department {
  id     String @id @default(uuid())
  code   String @unique
  name   String
  status Int    @default(1)

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Division Division[]

  @@map("department")
}

model Account {
  id          String @id @default(uuid())
  code        String @unique
  name        String
  description String

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("account")
}

model Employee {
  id         String  @id @default(uuid())
  firstname  String
  middlename String?
  lastname   String

  jo_approver_setting   JOApproverSetting?   @relation("JOApproverSetting")
  meqs_approver_setting MEQSApproverSetting? @relation("MEQSApproverSetting")
  po_approver_setting   POApproverSetting?   @relation("POApproverSetting")
  rv_approver_setting   RVApproverSetting?   @relation("RVApproverSetting")
  spr_approver_setting  SPRApproverSetting?  @relation("SPRApproverSetting")
  rr_approver_setting   RRApproverSetting?   @relation("RRApproverSetting")

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  user_employee UserEmployee?

  @@map("employee")
}

model Classification {
  id   String @id @default(uuid())
  name String

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("classification")
}

model User {
  id   String @id @default(uuid())
  role Role   @default(USER)

  username String @unique
  password String
  status   Int    @default(1)

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // user_permissions UserPermission[]
  user_employee UserEmployee?

  @@map("user")
}

model UserEmployee {
  id          String   @id @default(uuid())
  user_id     String   @unique
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  employee_id String   @unique
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  created_by String
  updated_by String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_employee")
}

// model UserPermission {
//   id String @id @default(uuid())

//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt
//   is_deleted Boolean  @default(false)

//   user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
//   user_id String

//   submodule    SubModule @relation(fields: [submodule_id], references: [id], onDelete: Restrict)
//   submodule_id String

//   @@map("user_permission")
// }

model Service {
  id   String @id @default(uuid())
  name String

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  features Feature[] @relation("ServiceToFeature")

  @@map("service")
}

model Feature {
  id   String @id @default(uuid())
  name String

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  service    Service  @relation("ServiceToFeature", fields: [service_id], references: [id], onDelete: Cascade)
  service_id String
  modules    Module[] @relation("FeatureToModule")

  @@map("feature")
}

model Module {
  id   String @id @default(uuid())
  name String

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  feature    Feature @relation("FeatureToModule", fields: [feature_id], references: [id], onDelete: Cascade)
  feature_id String

  submodules SubModule[] @relation("ModuleToSubmodule")

  @@map("module")
}

model SubModule {
  id   String @id @default(uuid())
  name String

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  module    Module @relation("ModuleToSubmodule", fields: [module_id], references: [id], onDelete: Cascade)
  module_id String

  // user_permissions UserPermission[]

  @@map("submodule")
}

model JOApproverSetting {
  id          String @id @default(uuid())
  label       String
  order       Int    @unique
  approver_id String @unique

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  approver Employee @relation("JOApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)

  @@map("jo_approver_setting")
}

model RVApproverSetting {
  id          String @id @default(uuid())
  label       String
  order       Int    @unique
  approver_id String @unique

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  approver Employee @relation("RVApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)

  @@map("rv_approver_setting")
}

model SPRApproverSetting {
  id          String @id @default(uuid())
  label       String
  order       Int    @unique
  approver_id String @unique

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  approver Employee @relation("SPRApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)

  @@map("spr_approver_setting")
}

model MEQSApproverSetting {
  id          String @id @default(uuid())
  label       String
  order       Int    @unique
  approver_id String @unique

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  approver Employee @relation("MEQSApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)

  @@map("meqs_approver_setting")
}

model POApproverSetting {
  id          String @id @default(uuid())
  label       String
  order       Int    @unique
  approver_id String @unique

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  approver Employee @relation("POApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)

  @@map("po_approver_setting")
}

model RRApproverSetting {
  id          String @id @default(uuid())
  label       String
  order       Int    @unique
  approver_id String @unique

  created_by String
  updated_by String?
  deleted_by String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  approver Employee @relation("RRApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)

  @@map("rr_approver_setting")
}
