generator client {
  output   = "./generated/client"
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Division {
  id            String     @id @default(uuid())
  department_id String
  department    Department @relation(fields: [department_id], references: [id], onDelete: Restrict)
  code          String     @unique
  name          String
  status        Int        @default(1)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  is_deleted    Boolean    @default(false)

  @@map("division")
}

model Department {
  id         String     @id @default(uuid())
  code       String     @unique
  name       String
  status     Int        @default(1)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  is_deleted Boolean    @default(false)
  Division   Division[]

  @@map("department")
}

model Employee {
  id         String  @id @default(uuid())
  firstname  String
  middlename String?
  lastname   String

  jo_approver_setting   JOApproverSetting?   @relation("JOApproverSetting")
  meqs_approver_setting MEQSApproverSetting? @relation("MEQSApproverSetting")
  po_approver_setting   POApproverSetting?   @relation("POApproverSetting")
  rv_approver_setting   RVApproverSetting?   @relation("RVApproverSetting")
  spr_approver_setting  SPRApproverSetting?  @relation("SPRApproverSetting")

  jo_approver_proxy_setting   JOApproverSetting?   @relation("JOApproverProxySetting")
  meqs_approver_proxy_setting MEQSApproverSetting? @relation("MEQSApproverProxySetting")
  po_approver_proxy_setting   POApproverSetting?   @relation("POApproverProxySetting")
  rv_approver_proxy_setting   RVApproverSetting?   @relation("RVApproverProxySetting")
  spr_approver_proxy_setting  SPRApproverSetting?  @relation("SPRApproverProxySetting")

  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  is_deleted        Boolean             @default(false)
  user_employee     UserEmployee?
  RVApproverSetting RVApproverSetting[]

  @@map("employee")
}

model Classification {
  id   String @id @default(uuid())
  name String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)

  @@map("classification")
}

model User {
  id   String @id @default(uuid())
  role Role   @default(USER)

  username String @unique
  password String
  status   Int    @default(1)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)

  user_permissions UserPermission[]
  user_employee    UserEmployee?

  @@map("user")
}

model UserEmployee {
  id          String   @id @default(uuid())
  user_id     String   @unique
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  employee_id String   @unique
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)

  @@map("user_employee")
}

model UserPermission {
  id String @id @default(uuid())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  module    Module @relation(fields: [module_id], references: [id], onDelete: Restrict)
  module_id String

  @@map("user_permission")
}

model Service {
  id   String @id @default(uuid())
  name String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)

  features Feature[] @relation("ServiceToFeature")

  @@map("service")
}

model Feature {
  id   String @id @default(uuid())
  name String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)

  service    Service  @relation("ServiceToFeature", fields: [service_id], references: [id], onDelete: Cascade)
  modules    Module[] @relation("FeatureToModule")
  service_id String

  @@map("feature")
}

model Module {
  id   String @id @default(uuid())
  name String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)

  feature    Feature @relation("FeatureToModule", fields: [feature_id], references: [id], onDelete: Cascade)
  feature_id String

  user_permissions UserPermission[]

  @@map("module")
}

model JOApproverSetting {
  id                String   @id @default(uuid())
  label             String
  order             Int      @unique
  approver_id       String   @unique
  approver_proxy_id String?  @unique
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  is_deleted        Boolean  @default(false)

  approver       Employee  @relation("JOApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)
  approver_proxy Employee? @relation("JOApproverProxySetting", fields: [approver_proxy_id], references: [id], onDelete: Restrict)

  @@map("jo_approver_setting")
}

model RVApproverSetting {
  id                String    @id @default(uuid())
  approver_id       String    @unique
  approver_proxy_id String?   @unique
  label             String
  order             Int       @unique
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  is_deleted        Boolean   @default(false)
  approver          Employee  @relation("RVApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)
  approver_proxy    Employee? @relation("RVApproverProxySetting", fields: [approver_proxy_id], references: [id], onDelete: Restrict)
  Employee          Employee? @relation(fields: [employeeId], references: [id])
  employeeId        String?

  @@map("rv_approver_setting")
}

model SPRApproverSetting {
  id                String    @id @default(uuid())
  approver_id       String    @unique
  approver_proxy_id String?   @unique
  label             String
  order             Int       @unique
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  is_deleted        Boolean   @default(false)
  approver          Employee  @relation("SPRApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)
  approver_proxy    Employee? @relation("SPRApproverProxySetting", fields: [approver_proxy_id], references: [id], onDelete: Restrict)

  @@map("spr_approver_setting")
}

model MEQSApproverSetting {
  id                String    @id @default(uuid())
  approver_id       String    @unique
  approver_proxy_id String?   @unique
  label             String
  order             Int       @unique
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  is_deleted        Boolean   @default(false)
  approver          Employee  @relation("MEQSApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)
  approver_proxy    Employee? @relation("MEQSApproverProxySetting", fields: [approver_proxy_id], references: [id], onDelete: Restrict)

  @@map("meqs_approver_setting")
}

model POApproverSetting {
  id                String    @id @default(uuid())
  approver_id       String    @unique
  approver_proxy_id String?   @unique
  label             String
  order             Int       @unique
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  is_deleted        Boolean   @default(false)
  approver          Employee  @relation("POApproverSetting", fields: [approver_id], references: [id], onDelete: Restrict)
  approver_proxy    Employee? @relation("POApproverProxySetting", fields: [approver_proxy_id], references: [id], onDelete: Restrict)

  @@map("po_approver_setting")
}
